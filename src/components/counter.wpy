<style lang="less">
  .counter {
    text-align: left;
    font-size: 12px;
  }
  .count {
    font-size: 18px;
    font-weight: bold;
    &.red {
      color: red;
    }
    &.green {
      color: green;
    }
  }
</style>
<template>
  <view class="counter {{style}}">
    <view>
      组件数值: <text class="count"> {{num}} </text>
    </view>
    <view>
      状态树state值: <text class="count"> {{stateNum}} </text>
    </view>
    <view>
      状态树Promise异步state值: <text class="count"> {{asyncNum}} </text>
    </view>
    <button @tap="plus" size="mini">  组件 +  </button>
    <button @tap="minus" size="mini">  组件 -  </button>
    <button @tap="incNum" size="mini">  状态树 +  </button>
    <button @tap="decNum" size="mini">  状态树 -  </button>
    <button @tap="asyncInc" size="mini">  状态树异步 +  </button>
    <button @tap="asyncDec" size="mini">  状态树异步 -  </button>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import { asyncInc, asyncDec } from '../store/actions'
  
  @connect({
    stateNum (state) {
      return state.counter.num
    },
    asyncNum (state) {
      return state.counter.asyncNum
    }
  }, {
    incNum: 'INCREMENT',
    decNum: 'DECREMENT',
    asyncInc: asyncInc,
    asyncDec: asyncDec
  })

  export default class Counter extends wepy.component {
    props = {
      num: {
        type: [Number, String],
        coerce: function (v) {
          return +v
        },
        default: 50
      }
    }

    data = {
      
    }
    // events对象中所声明的函数为用于监听组件之间的通信与交互事件的事件处理函数
    events = {
      'index-broadcast': (args, $event) => {
        console.log(args,`${this.$name} receive ${$event.name} from ${$event.source.$name}`)
      }
    }

    watch = {
      num (curVal, oldVal) {
        console.log(`旧值：${oldVal}，新值：${curVal}`)
      }
    }

    methods = {
      plus () {
        this.num = this.num + 1
        this.changeNum()
      },
      minus () {
        this.num = this.num - 1
        this.changeNum()
      },
      plus2 () {
        this.num = this.num + 2
        this.changeNum()
      },
      minus2 () {
        this.num = this.num - 2
        this.changeNum()
      }
    }
    changeNum() {
      this.$emit('index-emit', this.num)
    }
  }
</script>
