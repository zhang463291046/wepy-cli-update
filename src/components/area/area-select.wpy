<!-- 选择市级插件 -->
<template>
  <view class="main">
    <!-- 悬浮搜索图标 -->
    <view class="search-icon">
      <input value="{{searchText}}" type="" class="input" @input="getSearchText" confirm-type="search" placeholder="请输入市" />
      <icon type="search" class="icon" @tap.stop="showSearchInput"/>
    </view>
    <view class="close-icon">
      <icon type="clear" class="icon" size="30" @tap.stop="hideSearchInput"/>
    </view>
    <!-- 搜索结果 -->
    <view wx:if="{{showSearch}}" class="search-result" style="height: calc(100vh - 40px)">
      <scroll-view wx:if="{{searchResult.length}}" style="height: 100%; width: 100%; background-color: white" scroll-y>
        <repeat for="{{searchResult}}">
          <view class="city-item" @tap="onSelected({{item}})">{{ item.name }}</view>
        </repeat>
      </scroll-view>
    </view>
    <!-- 市主体 -->
    <scroll-view class="container" scroll-y scroll-into-view="{{scrollIntoId}}">
      <!-- 定位城市 -->
      <view id="top" class="city-letter">当前定位城市：</view>
      <view wx:if="{{locationFail}}" class="city-item">定位失败</view>
      <view wx:else class="city-item" @tap="onLocationTaped()">{{ location ? location : '定位中...' }}</view>
      <!-- 热门城市 -->
      <view class="city-letter">热门城市</view>
      <repeat for="{{hotCitys}}" >
        <view class="city-item" @tap="onSelected({{item}})">{{item.name}}</view>
      </repeat>
      <!-- 市列表 -->
      <repeat for="{{citys}}" key="letter.letter" item="letter">
        <view>
          <view class="city-letter" id="{{letter.letter}}">{{ letter.letter }}</view>
          <repeat for="{{letter.cityInfo}}" key="city.id" item="city">
            <view class="city-item" @tap="onSelected({{city}})">{{ city.name }}</view>
          </repeat>
        </view>
      </repeat>
    </scroll-view>
    <!-- 右侧快速导航栏 -->
    <view class="index-list">
      <repeat for="{{letters}}">
        <view class="index-list-item" data-letter="{{item}}" @touchstart.stop="onListTouchStart" @touchmove.stop="onListTouchMove" @touchend.stop="onListTouchEnd">{{ item }}</view>
      </repeat>
    </view>
    <!-- 提示字母 -->
    <view wx:if="{{currentLetter}}" class="letter-notify">{{ currentLetter }}</view>
  </view>
</template>
<script>
import wepy from 'wepy'
// 城市列表
import citys from './selectData.js'
// 设置热门城市Code
const hotCode = ['110100', '310000', '440100', '440300', '330100', '320100']

export default class AreaSelect extends wepy.component {
  props = {
    show: {
      type: Boolean,
      default: true
    }
  }

  data = {
    citys: [],
    hotCitys: [],
    letters: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'W', 'X', 'Y', 'Z'],
    scrollIntoId: '',
    currentLetter: '',
    location: '',
    locationFail: false,
    letterHeight: 18,
    startPageY: 0,
    timer: null,
    showSearch: false,
    searchText: '',
    searchResult: []
  }

  methods = {
    onListTouchStart ({ currentTarget, touches }) {
      const letter = currentTarget.dataset.letter
      this.onLetterTaped(letter)
      this.startPageY = touches[0].pageY
    },
    onListTouchMove ({ currentTarget, touches }) {
      const letter = currentTarget.dataset.letter
      const index = this.letters.indexOf(letter)
      const pageY = touches[0].pageY
      let dist = ~~(Math.abs(this.startPageY - pageY) / this.letterHeight)
      let isUp = false
      if(this.startPageY - pageY > 0){ 
        isUp = true
      }
      if (dist) {
        let i = isUp ? index - dist : index + dist
        i < 0 && (i = 0)
        i > this.letters.length - 1 && (i = this.letters.length - 1)
        this.onLetterTaped(this.letters[i])
      }
    },
    onListTouchEnd () {
      if (this.timer) {
        clearTimeout(this.timer)
      }
      this.timer = setTimeout(() => {
        clearTimeout(this.timer)
        this.currentLetter = ''
        this.timer = null
        this.$apply()
      }, 750)
    },
    // 关闭隐藏
    hideSearchInput: function () {
      this.searchText = '';
      this.showSearch = false
    },
    // 点击搜索
    showSearchInput: function () {
      if (this.searchText==='') {
        wx.showToast({
          title: '请输入关键字'
        })
        return
      }
      this.showSearch = true
      this.searchCityData(this.searchText)
    },
    // 关键字
    getSearchText (e) {
      let searchText = e.detail.value.trim()
      this.searchText = searchText;
    },
    // 选择城市
    onSelected (item) {
      const self = this
      let _city = item.name
      wx.showModal({
        title: '您选择的城市',
        content: _city,
        success: function (res) {
          // 确定
          if(res.confirm){
            self.$emit('select', item)
            self.showSearch = false
            self.$apply()
          }
          // 取消
          if(res.cancel){

          }
        }
      })
    },
    // 选择定位的城市
    onLocationTaped () {
      if (!this.location.trim()) {
        return
      }
      wx.showToast({
        title: this.location
      })
    }
  }
 
  async onLoad () {
    this.citys = this.getLetterCity()
    this.hotCitys = this.getHotCity()
    wx.showLoading({
      title: '加载中'
    })
    // 定位功能
    try {
       const location = await this.getLocation()
       const ret = await this.getCityNameFromBaidu(location.latitude, location.longitude)
       this.location = ret
       this.$apply()
     } catch (error) {
       this.locationFail = true
       this.$apply()
     } finally {
       wx.hideLoading()
     }
  }
  // 搜索结果
  searchCityData (searchText) {
    const reg = new RegExp(searchText, 'ig')
    const _searchCityData = citys.filter(i => {
      return reg.test(i.name) || reg.test(i.search)
    })
    this.searchResult = _searchCityData
    console.log(this.searchResult)
  }
  // 获取经纬度
  getLocation () {
    return new Promise((resolve, reject) => {
       wx.getLocation({
          type: 'wgs84',
          success: resolve,
          fail: reject
      })
    })
  }
  onLetterTaped (letter) {
    this.scrollIntoId = letter === '#' ? 'top' : letter
    this.currentLetter = letter
  }
  // 从百度接口获取城市名
  getCityNameFromBaidu (latitude, longitude) {
    const ak = 'GSEuHGieb8dh6R6ypS2vMUMdGGGo14fF'
    const url = `https://api.map.baidu.com/geocoder/v2/?location=${latitude},${longitude}&output=json&pois=1&ak=${ak}`
    return new Promise((resolve, reject) => {
       wepy.request(url).then(({ data }) => {
         resolve(data.result.addressComponent.city)
       })
       .catch(reject)
    })
  }
  // 处理城市列表数据,进行按照字母分组
  getLetterCity () {
    let tempObj=[]
    for (let i = 0; i < this.letters.length; i++) {
      let letter = this.letters[i]
      let cityInfo = []
      let tempArr = {}
      tempArr.letter = letter
      for (let j = 0; j < citys.length; j++) {
        if (letter == citys[j].letter) {
          cityInfo.push(citys[j])
        }
      }
      tempArr.cityInfo = cityInfo
      tempObj.push(tempArr)
    }
    return tempObj
  }
  // 获取热门城市列表
  getHotCity () {
    const cityInfo = []
    for (let item of citys) {
      if (hotCode.indexOf(item.code) !== -1) {
        cityInfo.push(item)
      }
    }
    this.letters.unshift('#')
    return cityInfo.sort((a, b) => a.code > b.code)
  }
}
</script>
<style lang="less">
.main {
  width:100vw;
  height:100vh;
  box-sizing:border-box;
  padding:100rpx 10rpx 10rpx 10rpx;
  position:absolute;
  z-index:10000;
  top:0;
  left:0;
  overflow:hidden;
  background:#fff;
  // 城市列表
  .container{
    width: 100vw;
    height:100%;
    box-sizing:border-box;
    .city-letter {
      text-indent: 28px;
      height: 30px;
      line-height: 30px;
      background-color: #eee
    }
    .city-item {
      height: 50px;
      line-height: 50px;
      background-color: white;
      text-indent: 28px;
      font-size: 14px;
      position: relative;
      &::after {
        content: ' ';
        display: block;
        height: 1px;
        width: 90%;
        position: absolute;
        left: 5%;
        bottom: 0;
        background-color: #DDD;
        transform: scaleY(.5)
      }
      &:active {
        opacity: .7;
      }
    } 
  }
  // 右侧快速导航栏
  .index-list {
    position: fixed;
    width: 40rpx;
    right: 10rpx;
    bottom: 60rpx;
    .index-list-item {
      width: 100%;
      height: 40rpx;
      font-size: 12px;
      display: flex;
      justify-content: center;
      align-items: center;
    }
  }
  // 搜索图标
  .search-icon{
    position:absolute;
    width:580rpx;
    height:80rpx;
    background:#eee;
    top:10rpx;
    left:60rpx;
    border-radius:40rpx;
    overflow:hidden;
    display:flex;
    .icon{
      width:70rpx;
      height:70rpx;
      margin:5rpx;
      text-align: center;
      font-size: 28px;
    }
    .input{
      flex:1;
      height:80rpx;
      line-height:80rpx;
      font-size:30rpx;
      padding-left:40rpx
    }
  }
  // 关闭搜索
  .close-icon{
    position:absolute;
    width:80rpx;
    height:80rpx;
    top:10rpx;
    right:30rpx;
    border-radius:40rpx;
    overflow:hidden;
    display:flex;
    .icon{
      width:70rpx;
      height:70rpx;
      margin:5rpx;
      text-align: center;
      font-size: 30px;
    }
  }
  // 搜索结果
  .search-result {
    width: 100vw;
    height: 100%;
    box-sizing:border-box;
    overflow-x:hidden;
    overflow-y:scroll;
    background:#fff;
    .city-item {
      height: 50px;
      line-height: 50px;
      background-color: white;
      text-indent: 28px;
      font-size: 14px;
      position: relative;
      &::after {
        content: ' ';
        display: block;
        height: 1px;
        width: 90%;
        position: absolute;
        left: 5%;
        bottom: 0;
        background-color: #DDD;
        transform: scaleY(.5)
      }
      &:active {
        opacity: .7;
      }
    }
  }
  // 字母提示
  .letter-notify {
    height: 80px;
    width: 80px;
    background-color: rgba(0, 0, 0, .7);
    position: fixed;
    top: 50%;
    left: 50%;
    margin-top: -40px;
    margin-left: -40px;
    border-radius: 5px;
    color: white;
    line-height: 80px;
    font-size: 50px;
    text-align: center;
  }
}
</style>
